<?php

// Use this file to test content of emails generated by MemberWing upon new user signup.
// -------------------------------------------------------------------------------------
//
// 1. Change email addresses below - make sure they are real for you - so that you'd actually receive email notifications:
//       $_inputs['payer_email']
//       $_inputs['receiver_email']
// 2. Edit '$testing_what' array values - set ONLY ONE of desired values to '1', others to '0'.

// Load everything
include_once (preg_replace ('|(/+[^/]+){3}$|', '/mwx-include-all.php', str_replace ('\\', '/', __FILE__)));

$_extension_name = 'Authorize.net Postback';

MWX__log_event (__FILE__, __LINE__, "\n==================================\n\n$_extension_name: Raw Entry Hit.\n  === POST data: ===\n    " . serialize($_POST) . "\n  === GET data: ===\n    " . serialize($_GET));

if (!function_exists('validateCheckoutClaim'))
   {
   function validateCheckoutClaim ($valuestosecure, $securityseed)
      {
      // $valuestosecure may be a subscription_id or a buy it now price
      $len = strlen($securityseed);
      $saltedpass = substr($securityseed, 0, round($len/2)) . $valuestosecure . substr($securityseed, round($len/2), $len);
      return md5($saltedpass);
      }
   }

// verify required fields are present
if (!isset($_GET['event_type'])
   || !isset($_GET['item_name'])
   || !isset($_GET['first_name'])
   || !isset($_GET['last_name'])
   || !isset($_GET['email'])
   || !isset($_GET['payment_amount'])
   || !isset($_GET['payment_currency'])
   || !isset($_GET['desired_username'])
   || !isset($_GET['desired_password'])
   || !isset($_GET['verify_hash']))
   {
   MWX__log_event (__FILE__, __LINE__, "$_extension_name: Some required parameters are missing from request. Insufficient data to process Authorize.net request. Aborting...");
   exit ();
   }

// Load MWX settings
$mwx_settings = MWX__get_settings ();

if (!$mwx_settings['authnet_postback_integration_enabled'])
   {
   MWX__log_event (__FILE__, __LINE__, "$_extension_name: integration is not enabled inside of MemberWing-X admin panel settings (MemberWing-X->Integration with other systems). Aborting...");
   exit ();
   }

// Create global '$_inputs' array and initialize it with default values
$_inputs = array ();
MWX__ResetInputs ($_inputs);

// verify hash
if ($_GET['verify_hash'] != validateCheckoutClaim (substr(md5($_GET['email']),3,8), get_option('authnet_securityseed')))
   {
   MWX__log_event (__FILE__, __LINE__, "$_extension_name: ERROR: validateCheckoutClaim() failed. Invalid data. Cannot process request");
   exit ();
   }

//---------------------------------------
// Sanitize posted variables into '$_inputs' array
//
$_inputs['item_name']         = $_GET['item_name'];
$_inputs['mc_amount3_gross']  = $_GET['payment_amount'];     // Amount paid
$_inputs['txn_type']          = $_GET['event_type'];
$_inputs['first_name']        = $_GET['first_name'];  // Buyer
$_inputs['last_name']         = $_GET['last_name'];   // Buyer
$_inputs['payer_email']       = $_GET['email'];    // Buyer  (test buyer - your other email)
$_inputs['receiver_email']    = get_option('authnet_adminemail'); // Seller (you, webmaster, website owner)
$_inputs['desired_username']  = $_GET['desired_username'];     // Buyer's username (optional)
$_inputs['desired_password']  = $_GET['desired_password'];     // Buyer's password (optional)
$_inputs['U_txn_date']        = date ('Y-m-d H:i:s', strtotime ("now"));   // Normalize it for database usage.
$_inputs['txn_id']            = $_GET['txn_id'];      // this is either the xAuthCode or xSubscriptionId

// Note: no recurring payment notification events are being sent by Daniel's authorize.net plugin
//       - We can only create new subscriptions
//       - No notifications about refunds, cancellations are sent. If customer cancels - webmaster needs to manually remove user from premium members.

if ($_inputs['txn_type'] == 'authnet_recurring')
   {
   // 'authnet_recurring' == New subscription created - first event
   $_inputs['subscr_id'] = @$_GET['xSubscriptionId']; // Unique subscription ID issued by shopping cart.

   MWX__log_event (__FILE__, __LINE__, "$_extension_name: Subscription purchase. Item_name = '{$_inputs['item_name']}'. Paid: \${$_inputs['mc_amount3_gross']} === Calculated _inputs: ===\n    " . serialize($_inputs));

   // Process new subscription creation
   $_inputs['txn_type'] = 'subscr_signup';
   MWX__TransactionTypeSwitch ();
   }
else if ($_inputs['txn_type'] == 'authnet_single_recurring')
   {
   // 'authnet_single_recurring' == New subscription with some initial payment created - first event
   $_inputs['subscr_id'] = @$_GET['xAuthCode'];    // Unique subscription ID issued by shopping cart.

   MWX__log_event (__FILE__, __LINE__, "$_extension_name: Subscription purchase. Item_name = '{$_inputs['item_name']}'. Paid: \${$_inputs['mc_amount3_gross']} === Calculated _inputs: ===\n    " . serialize($_inputs));

   // Process new subscription creation
   $_inputs['txn_type'] = 'subscr_signup';
   MWX__TransactionTypeSwitch ();
   }
else if ($_inputs['txn_type'] == 'authnet_single')
   {
   $_inputs['txn_type'] = 'one_time_pay';
   $_inputs['payment_status'] = 'completed';

   MWX__log_event (__FILE__, __LINE__, "$_extension_name: Single item purchase. Item_name = '{$_inputs['item_name']}'. Paid: \${$_inputs['mc_amount3_gross']} === Calculated _inputs: ===\n    " . serialize($_inputs));
   // Process purchase
   MWX__TransactionTypeSwitch ();
   }
else
   {
   MWX__log_event (__FILE__, __LINE__, "$_extension_name: Attempted to process an unsupported transaction: '{$_inputs['txn_type']}'");
   exit();
   }

?>